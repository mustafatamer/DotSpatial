//------------------------------------------------------------------------------
// <auto-generated>
//     Bu kod araç tarafından oluşturuldu.
//     Çalışma Zamanı Sürümü:4.0.30319.42000
//
//     Bu dosyada yapılacak değişiklikler yanlış davranışa neden olabilir ve
//     kod yeniden oluşturulursa kaybolur.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotSpatial.Positioning.Properties {
    using System;
    
    
    /// <summary>
    ///   Yerelleştirilmiş dizeleri aramak gibi işlemler için, türü kesin olarak belirtilmiş kaynak sınıfı.
    /// </summary>
    // Bu sınıf ResGen veya Visual Studio gibi bir araç kullanılarak StronglyTypedResourceBuilder
    // sınıfı tarafından otomatik olarak oluşturuldu.
    // Üye eklemek veya kaldırmak için .ResX dosyanızı düzenleyin ve sonra da ResGen
    // komutunu /str seçeneğiyle yeniden çalıştırın veya VS projenizi yeniden oluşturun.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Bu sınıf tarafından kullanılan, önbelleğe alınmış ResourceManager örneğini döndürür.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotSpatial.Positioning.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Tümü için geçerli iş parçacığının CurrentUICulture özelliğini geçersiz kular
        ///   CurrentUICulture özelliğini tüm kaynak aramaları için geçersiz kılar.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Angle_ExtraCharactersWereEncountered {
            get {
                return ResourceManager.GetString("Angle_ExtraCharactersWereEncountered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as an angular measurement. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Angle_InvalidFormat {
            get {
                return ResourceManager.GetString("Angle_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The interval must be a value greater than zero, between 0 and 60. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Angle_InvalidInterval {
            get {
                return ResourceManager.GetString("Angle_InvalidInterval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Invalid format for Angle.ToString() method. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Angle_InvalidToStringFormat {
            get {
                return ResourceManager.GetString("Angle_InvalidToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Only the right-most number of a sexagesimal measurement can be a fractional value. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Angle_OnlyRightmostIsDecimal {
            get {
                return ResourceManager.GetString("Angle_OnlyRightmostIsDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   An Angle can only be compared with Angle, Double, or String values. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Angle_TypeMismatch {
            get {
                return ResourceManager.GetString("Angle_TypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as an area measurement. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Area_InvalidFormat {
            get {
                return ResourceManager.GetString("Area_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The numeric portion of the area measurement could not be recognized. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Area_InvalidNumericPortion {
            get {
                return ResourceManager.GetString("Area_InvalidNumericPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The unit portion of the area measurement could not be recognized. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Area_InvalidUnitPortion {
            get {
                return ResourceManager.GetString("Area_InvalidUnitPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The azimuth cannot be converted to a because no conversion has been implemented internally.  Please contact info@DotSpatial.Positioning.com with the source and destination unit types. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Azimuth_ConversionNotImplemented {
            get {
                return ResourceManager.GetString("Azimuth_ConversionNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   An Azimuth can only be compared with another Azimuth, or a Double. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Azimuth_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Azimuth_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Empty benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Common_Empty {
            get {
                return ResourceManager.GetString("Common_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Infinity benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Common_Infinity {
            get {
                return ResourceManager.GetString("Common_Infinity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The distance cannot be converted because no conversion has been implemented internally.  Please contact info@DotSpatial.Positioning.com with the source and destination unit types. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Distance_ConversionNotImplemented {
            get {
                return ResourceManager.GetString("Distance_ConversionNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Distance objects can only be compared with other Distance objects. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Distance_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Distance_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as a distance measurement. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Distance_InvalidFormat {
            get {
                return ResourceManager.GetString("Distance_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The numeric portion of the distance measurement could not be recognized. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Distance_InvalidNumericPortion {
            get {
                return ResourceManager.GetString("Distance_InvalidNumericPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The unit portion of the distance measurement could not be recognized. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Distance_InvalidUnitPortion {
            get {
                return ResourceManager.GetString("Distance_InvalidUnitPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified license key is invalid.  Please contact DotSpatial.Positioning to look up license keys you have purchased: http://dotspatial.codeplex.com/Secured/LicenseKeys.aspx. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicense_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicense_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Would you like to go online now to activate your trial?  An email address will not be required unless you&apos;re behind a proxy server. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_AskToGoOnline {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_AskToGoOnline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   {0} Stopped Execution benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ExecutionStoppedDialogTitle {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ExecutionStoppedDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided, or the reference the assembly has been removed. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ExecutionStoppedNeedKeys {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ExecutionStoppedNeedKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided.  Please visit http://dotspatial.codeplex.com/FreeTrialLicenseKeys.aspx to obtain free license keys for any of our products. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ExecutionStoppedVisitWebSite {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ExecutionStoppedVisitWebSite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Do you want to go online to activate free trial license keys? benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_GoOnlineForTrialKeys {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_GoOnlineForTrialKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   An invalid license key was encountered while attempting to grant a license to a DotSpatial.Positioning object.  The invalid key is &quot;{0}&quot; benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The license key for {0} is valid for a different major version of the software.  Please visit http://dotspatial.codeplex.com/Shop for pricing on products for this version.  Updates to DotSpatial.Positioning software are always free for each minor version change (e.g. versions 2.0 through 2.999) benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_InvalidMajorVersion {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_InvalidMajorVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The license key for {0} is not valid for the current .NET platform.  Please contact support@DotSpatial.Positioning.com for assistance or visit http://dotspatial.codeplex.com/Shop for pricing on products for this platform. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_InvalidPlatform {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_InvalidPlatform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A DotSpatial.Positioning License Key Is Required benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_LicenseKeyDialogTitle {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_LicenseKeyDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A license key is required for this DotSpatial.Positioning assembly to function.  You can activate a free thirty-day trial online at http://dotspatial.codeplex.com. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_LicenseKeyIsRequired {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_LicenseKeyIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A valid owner license has been granted for {0} benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ValidOwnerLicense {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ValidOwnerLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A trial license has been granted for {0} until {1} benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ValidTrialLicense {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ValidTrialLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified value could not be parsed into a GeographicSize object because two delimited values are required (Width, Height). benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string GeographicSize_InvalidFormat {
            get {
                return ResourceManager.GetString("GeographicSize_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The Parse method requires a decimal or sexagesimal measurement. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Latitude_DecimalOrSexagesimalRequired {
            get {
                return ResourceManager.GetString("Latitude_DecimalOrSexagesimalRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A Latitude can only be compared with another Latitude, Double or String. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Latitude_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Latitude_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as a latitude. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Latitude_InvalidFormat {
            get {
                return ResourceManager.GetString("Latitude_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;North&apos; or &apos;South&apos; is required. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Latitude_InvalidHemisphere {
            get {
                return ResourceManager.GetString("Latitude_InvalidHemisphere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The hemisphere specified indicates a longitude but a latitude is expected. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Latitude_LatitudeHemisphereExpected {
            get {
                return ResourceManager.GetString("Latitude_LatitudeHemisphereExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Only the right-most number can be a floating-point value. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Latitude_OnlyRightmostIsDecimal {
            get {
                return ResourceManager.GetString("Latitude_OnlyRightmostIsDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The Parse method requires a decimal or sexagesimal measurement. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Longitude_DecimalOrSexagesimalRequired {
            get {
                return ResourceManager.GetString("Longitude_DecimalOrSexagesimalRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A Longitude can only be compared with another Longitude, Double or String. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Longitude_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Longitude_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as a longitude. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Longitude_InvalidFormat {
            get {
                return ResourceManager.GetString("Longitude_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;East&apos; or &apos;West&apos; is required. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Longitude_InvalidHemisphere {
            get {
                return ResourceManager.GetString("Longitude_InvalidHemisphere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The hemisphere specified indicates a latitude but a longitude is expected. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Longitude_LongitudeHemisphereExpected {
            get {
                return ResourceManager.GetString("Longitude_LongitudeHemisphereExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Only the right-most number can be a floating-point value. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Longitude_OnlyRightmostIsDecimal {
            get {
                return ResourceManager.GetString("Longitude_OnlyRightmostIsDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Duplicate UTM zone information was found when trying to parse a UTM coordinate. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_DuplicateZoneInformation {
            get {
                return ResourceManager.GetString("Position_DuplicateZoneInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as a spherical or UTM coordinate. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_InvalidFormat {
            get {
                return ResourceManager.GetString("Position_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified string could not be recognized as a valid UTM coordinate. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_InvalidUTMCoordinate {
            get {
                return ResourceManager.GetString("Position_InvalidUTMCoordinate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A UTM zone letter can only be one character long.  Multiple characters were encountered. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_InvalidZoneLetter {
            get {
                return ResourceManager.GetString("Position_InvalidZoneLetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   A UTM zone number can only be one or two characters long.  Multiple characters were encountered. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_InvalidZoneNumber {
            get {
                return ResourceManager.GetString("Position_InvalidZoneNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   No UTM zone letter could be located within the specified string. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_NoUTMZoneLetter {
            get {
                return ResourceManager.GetString("Position_NoUTMZoneLetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   No UTM zone number could be located within the specified string. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Position_NoUTMZoneNumber {
            get {
                return ResourceManager.GetString("Position_NoUTMZoneNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The total area could not be calculated. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string PositionCollection_AreaError {
            get {
                return ResourceManager.GetString("PositionCollection_AreaError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The total distance could not be calculated. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string PositionCollection_DistanceError {
            get {
                return ResourceManager.GetString("PositionCollection_DistanceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The range must be a distance greater than or equal to zero. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string PositionCollection_RangeMustBeAboveZero {
            get {
                return ResourceManager.GetString("PositionCollection_RangeMustBeAboveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Height must be a number greater than zero. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string RectangleD_HeightMustBeAboveZero {
            get {
                return ResourceManager.GetString("RectangleD_HeightMustBeAboveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified value could not be parsed into a RectangleD object because four delimited values are required (Top, Left, Bottom, Right). benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string RectangleD_InvalidFormat {
            get {
                return ResourceManager.GetString("RectangleD_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Width must be a number greater than zero. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string RectangleD_WidthMustBeAboveZero {
            get {
                return ResourceManager.GetString("RectangleD_WidthMustBeAboveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Two values must be supplied to create a SizeD object from a string.  Verify that the CultureInfo passed matches the delimiter used to separate the values. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string SizeD_InvalidFormat {
            get {
                return ResourceManager.GetString("SizeD_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The specified format could not be fully recognized as a speed measurement. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Speed_InvalidFormat {
            get {
                return ResourceManager.GetString("Speed_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The numeric portion of the speed measurement could not be recognized. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Speed_InvalidNumericPortion {
            get {
                return ResourceManager.GetString("Speed_InvalidNumericPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The unit portion of the speed measurement could not be recognized. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string Speed_InvalidUnitPortion {
            get {
                return ResourceManager.GetString("Speed_InvalidUnitPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Trial License Expires {0} ({1} days remaining) benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string TrialLicense_ExpirationDate {
            get {
                return ResourceManager.GetString("TrialLicense_ExpirationDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Would you like to go online to try and extend your free trial now? benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string TrialLicense_ExtendTrial {
            get {
                return ResourceManager.GetString("TrialLicense_ExtendTrial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Purchased license keys cannot be used as trial license keys.  Please use another key or contact DotSpatial.Positioning for further assistance. benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string TrialLicense_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("TrialLicense_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sorry, the trial key for the following DotSpatial.Positioning assembly expired on {0}.  You can go online to try and extend your trial another month, or you can purchase a license key online.\r\n\r\n{1} benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string TrialLicense_LicenseExpired {
            get {
                return ResourceManager.GetString("TrialLicense_LicenseExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   DotSpatial.Positioning Trial Has Expired benzeri yerelleştirilmiş bir dize arar.
        /// </summary>
        internal static string TrialLicense_LicenseExpiredDialogTitle {
            get {
                return ResourceManager.GetString("TrialLicense_LicenseExpiredDialogTitle", resourceCulture);
            }
        }
    }
}
